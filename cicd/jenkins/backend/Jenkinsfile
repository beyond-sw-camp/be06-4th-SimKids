pipeline {
    agent any

    stages {
        stage('Git clone') {
            steps {
                // git clone
                git branch: 'backend-dev', url: 'https://github.com/beyond-sw-camp/be06-4th-SimKids.git'
            }
        }

        stage('Build') {
            steps {
                // gradlew 권한 부여 및 빌드
                sh '''
                chmod +x backend/gradlew
                cd backend
                ./gradlew bootJar
                '''
            }
        }

        stage('Dockerize') {
            steps {
                script {
                    // Docker 이미지 빌드 및 푸시
                    sh 'docker build --tag simkids/backend:1.$BUILD_ID ./backend'

                    // Docker Login
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credential', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    }

                    // Docker Push
                    sh 'docker push simkids/backend:1.$BUILD_ID'
                }
            }
        }

        stage('Deploy Canary') {
            steps {
                script {
                    // 파일 전송 및 배포 시작
                    sshPublisher(
                        continueOnError: false,
                        failOnError: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: "k8s-master",
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: 'cicd/k8s/backend/backend-deployment.yml, cicd/k8s/backend/backend-svc.yml, cicd/k8s/backend/backend-ingress.yml',
                                        remoteDirectory: "/home/master/",
                                        execCommand: '''
                                            # 새 버전 배포 - Deployment, Service, Ingress에 레이블을 new로 설정
                                            sed -i 's/canary-version: old/canary-version: new/' /home/master/cicd/k8s/backend/backend-deployment.yml
                                            sed -i 's/canary-version: old/canary-version: new/' /home/master/cicd/k8s/backend/backend-svc.yml
                                            sed -i 's/canary-version: old/canary-version: new/' /home/master/cicd/k8s/backend/backend-ingress.yml
                                            sed -i "s/latest/1.$BUILD_ID/g" /home/master/cicd/k8s/backend/backend-deployment.yml

                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-deployment.yml
                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-svc.yml
                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-ingress.yml

                                            sleep 3

                                            # 카나리 배포 시작 - 10% 트래픽 전환
                                            echo "Starting Canary Deployment with 10% traffic"
                                            sed -i 's/canary-weight: .*/canary-weight: "10%"/' /home/master/cicd/k8s/backend/backend-ingress.yml
                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-ingress.yml

                                            # 1분 동안 헬스 체크
                                            for i in {1..12}; do
                                                HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "canary-version: new" http://192.0.30.101/test)
                                                if [ "$HTTP_STATUS" != "200" ]; then
                                                    echo "Error: Service did not return 200 status. Exiting..."
                                                    exit 1
                                                fi
                                                sleep 1
                                            done

                                            # 50% 트래픽 전환
                                            echo "Updating Canary to 50% traffic"
                                            sed -i 's/canary-weight: .*/canary-weight: "50%"/' /home/master/cicd/k8s/backend/backend-ingress.yml
                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-ingress.yml

                                            # 1분 동안 헬스 체크
                                            for i in {1..12}; do
                                                HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "canary-version: new" http://192.0.30.101/test)
                                                if [ "$HTTP_STATUS" != "200" ]; then
                                                    echo "Error: Service did not return 200 status. Exiting..."
                                                    exit 1
                                                fi
                                                sleep 1
                                            done

                                            # 100% 트래픽 전환
                                            echo "Finalizing Canary Deployment with 100% traffic"
                                            sed -i 's/canary-weight: .*/canary-weight: "100%"/' /home/master/cicd/k8s/backend/backend-ingress.yml
                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-ingress.yml

                                            # 최종 헬스 체크
                                            for i in {1..12}; do
                                                HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "canary-version: new" http://192.0.30.101/test)
                                                if [ "$HTTP_STATUS" != "200" ]; then
                                                    echo "Error: Service did not return 200 status. Exiting..."
                                                    exit 1
                                                fi
                                                sleep 1
                                            done

                                            echo "카나리 배포 성공! 100% 트래픽 전환 완료"
                                        '''
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }

    post {
        failure {
            // 실패 시 롤백 작업
            sh '''
            echo '배포가 실패했습니다. k8s 리소스를 정리합니다.'
            ssh master@192.0.30.14 '
            # 실패 시 새 리소스 롤백 (Deployment, Service, Ingress)
            kubectl delete deployment -l canary-version=new
            kubectl delete service -l canary-version=new
            kubectl delete ingress -l canary-version=new
            '
            '''
        }
        success {
            // 배포 성공 시 기존 리소스 제거 및 레이블 업데이트
            sh '''
            echo '카나리 배포가 완료되어 기존 리소스를 삭제하고 레이블을 업데이트합니다.'
            ssh master@192.0.30.14 '
            # 기존 리소스 삭제 (Deployment, Service, Ingress)
            kubectl delete deployment -l canary-version=old
            kubectl delete service -l canary-version=old
            kubectl delete ingress -l canary-version=old

            # 새 리소스를 old로 변경 (Deployment, Service, Ingress)
            kubectl label deployment -l canary-version=new canary-version=old --overwrite
            kubectl label service -l canary-version=new canary-version=old --overwrite
            kubectl label ingress -l canary-version=new canary-version=old --overwrite
            '
            '''
        }
    }
}