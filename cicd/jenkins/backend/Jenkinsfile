pipeline {
    agent any

    environment {
        // 현재 빌드의 버전과 이전 버전 설정
        BASE_VERSION = 1
    }

    stages {
        stage('Initialize Version') {
                steps {
                    script {
                        // BUILD_NUMBER를 사용하여 버전 번호 설정
                        def buildNumber = env.BUILD_ID.toInteger()
                        env.CURRENT_VERSION = "v${buildNumber}"

                        // 이전 버전 설정
                        def previousVersionNumber = buildNumber - 1
                        env.PREVIOUS_VERSION = "v${previousVersionNumber}"


                    }
                }
            }

        stage('Git clone') {
            steps {
                // Git 클론
                git branch: 'backend-dev', url: 'https://github.com/beyond-sw-camp/be06-4th-SimKids.git'
            }
        }

        stage('Build') {
            steps {
                // gradlew 권한 부여 및 빌드
                sh '''
                chmod +x backend/gradlew
                cd backend
                ./gradlew bootJar
                '''
            }
        }

        stage('Dockerize') {
            steps {
                script {
                    // Docker 이미지 빌드 및 푸시
                    sh "docker build --tag simkids/backend:${BUILD_ID} ./backend"

                    // Docker 로그인
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credential', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    }

                    // Docker 푸시
                    sh "docker push simkids/backend:${BUILD_ID}"
                }
            }
        }

        stage('Deploy Canary') {
            steps {
                script {
                    writeFile file: 'env.properties', text: """
                                            CURRENT_VERSION=${env.CURRENT_VERSION}
                                            PREVIOUS_VERSION=${env.PREVIOUS_VERSION}
                                        """
                    // 파일 전송 및 배포 시작
                    sshPublisher(
                        continueOnError: false,
                        failOnError: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: "k8s-master",
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: 'cicd/k8s/backend/backend-deployment.yml, cicd/k8s/backend/backend-svc.yml, cicd/k8s/backend/backend-ingress.yml, env.properties',
                                        remoteDirectory: "/home/master/",
                                        execCommand: '''
                                            # 새 버전 배포
                                            set -a
                                                . /home/master/env.properties
                                            set +a

                                            source env.properties

                                            echo ${CURRENT_VERSION}
                                            echo ${PREVIOUS_VERSION}

                                            sed -i "s|image: simkids/backend:.*|image: simkids/backend:${BUILD_ID}|" /home/master/cicd/k8s/backend/backend-deployment.yml

                                            # 업데이트된 Deployment, Service, Ingress 적용
                                            DEPLOY=$(kubectl get deployments --no-headers | grep -v "^backend-deployment-${CURRENT_VERSION}" | grep ^backend | awk '{print $1}')
                                            SVC=$(kubectl get services --no-headers | grep -v "^backend-svc-${CURRENT_VERSION}" | grep ^backend | awk '{print $1}')
                                            INGRESS=$(kubectl get ingresses --no-headers | grep -v "^backend-ingress-${CURRENT_VERSION}" | grep ^backend | awk '{print $1}')
                                            sed -i "s/${DEPLOY}.*$/backend-deployment-${CURRENT_VERSION}/g" /home/master/cicd/k8s/backend/backend-deployment.yml
                                            sed -i "s/${SVC}.*$/backend-service-${CURRENT_VERSION}/g" /home/master/cicd/k8s/backend/backend-svc.yml
                                            sed -i "s/${INGRESS}.*$/backend-ingress-${CURRENT_VERSION}/g" /home/master/cicd/k8s/backend/backend-ingress.yml

                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-deployment.yml
                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-svc.yml
                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-ingress.yml

                                            sleep 3

                                            # 카나리 배포 시작 - 10% 트래픽 전환
                                            echo "Starting Canary Deployment with 10% traffic"
                                            sed -i 's/canary-weight: .*/canary-weight: "10"/' /home/master/cicd/k8s/backend/backend-ingress.yml
                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-ingress.yml

                                            # 헬스 체크 함수 정의
                                            check_health() {
                                                for i in {1..12}; do
                                                    HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "canary-version: new" http://192.0.30.101/test)
                                                    echo ${HTTP_STATUS}
                                                    if [ "$HTTP_STATUS" != "200" ]; then
                                                        echo "Error: Service did not return 200 status. Exiting..."
                                                        exit 1
                                                    fi
                                                    sleep 1
                                                done
                                            }

                                            # 10% 트래픽에 대해 헬스 체크
                                            check_health

                                            # 50% 트래픽 전환
                                            echo "Updating Canary to 50% traffic"
                                            sed -i 's/canary-weight: .*/canary-weight: "50"/' /home/master/cicd/k8s/backend/backend-ingress.yml
                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-ingress.yml

                                            # 50% 트래픽에 대해 헬스 체크
                                            check_health

                                            # 100% 트래픽 전환
                                            echo "Finalizing Canary Deployment with 100% traffic"
                                            sed -i 's/canary-weight: .*/canary-weight: "100"/' /home/master/cicd/k8s/backend/backend-ingress.yml
                                            kubectl apply -f /home/master/cicd/k8s/backend/backend-ingress.yml

                                            # 최종 헬스 체크
                                            check_health

                                            echo "카나리 배포 성공! 100% 트래픽 전환 완료"
                                        '''
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }

    post {
        failure {
            // 실패 시 롤백 작업
            sh '''
            echo '배포가 실패했습니다. k8s 리소스를 정리합니다.'
            ssh master@192.0.30.14 '
            # 실패 시 새 리소스 롤백 (Deployment, Service, Ingress)
            source env.properties
            kubectl delete deployment backend-deployment-${CURRENT_VERSION}
            kubectl delete service backend-service-${CURRENT_VERSION}
            kubectl delete ingress backend-ingress-${CURRENT_VERSION}
            '
            '''
        }
        success {
            // 배포 성공 시 기존 리소스 제거 및 새 버전으로 업데이트
            sh '''
            echo '카나리 배포가 완료되어 기존 리소스를 삭제하고 새 버전으로 업데이트합니다.'
            ssh master@192.0.30.14 '
            # 이전 버전 삭제 (Deployment, Service, Ingress)
            source env.properties
            TO_DELETE_DEPLOY=$(kubectl get deployments --no-headers | grep -v "^backend-deployment-${CURRENT_VERSION}" | grep ^backend | awk '{print $1}')
            TO_DELETE_SVC=$(kubectl get services --no-headers | grep -v "^backend-svc-${CURRENT_VERSION}" | grep ^backend | awk '{print $1}')
            TO_DELETE_INGRESS=$(kubectl get ingresses --no-headers | grep -v "^backend-ingress-${CURRENT_VERSION}" | grep ^backend | awk '{print $1}')
            kubectl delete ingress ${TO_DELETE_INGRESS}
            kubectl delete service ${TO_DELETE_SVC}
            kubectl delete deployment ${TO_DELETE_DEPLOY}
            sed -i 's|nginx.ingress.kubernetes.io/canary-by-header-value: "new"|nginx.ingress.kubernetes.io/canary-by-header-value: "old"|' /home/master/cicd/k8s/backend/backend-ingress.yml
            kubectl apply -f /home/master/cicd/k8s/backend/backend-ingress.yml
            '
            '''
        }
    }
}