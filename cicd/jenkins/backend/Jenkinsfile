pipeline {
    agent any

    environment {
        // 현재 빌드의 버전과 이전 버전 설정
        BASE_VERSION = 1
    }

    stages {
        stage('Initialize Version') {
            steps {
                script {
                    // BUILD_NUMBER를 사용하여 버전 번호 설정
                    def buildNumber = env.BUILD_ID.toInteger()
                    env.CURRENT_VERSION = "${buildNumber}"

                    // 이전 버전 설정
                    def previousVersionNumber = buildNumber - 1
                    env.PREVIOUS_VERSION = "${previousVersionNumber}"
                }
            }
        }

        stage('Git clone') {
            steps {
                // Git 클론
                git branch: 'backend-dev', url: 'https://github.com/beyond-sw-camp/be06-4th-SimKids.git'
            }
        }

        stage('Build') {
            steps {
                // gradlew 권한 부여 및 빌드
                sh '''
                chmod +x backend/gradlew
                cd backend
                ./gradlew bootJar
                '''
            }
        }

        stage('Dockerize') {
            steps {
                script {
                    // Docker 이미지 빌드 및 푸시
                    sh "docker build --tag simkids/backend:${BUILD_ID} ./backend"

                    // Docker 로그인
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credential', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    }

                    // Docker 푸시
                    sh "docker push simkids/backend:${BUILD_ID}"
                }
            }
        }

        stage('Deploy Canary') {
            steps {
                script {
                    writeFile file: 'env.properties', text: """
                        CURRENT_VERSION=${env.CURRENT_VERSION}
                        PREVIOUS_VERSION=${env.PREVIOUS_VERSION}
                    """
                    // 파일 전송 및 배포 시작
                    sshPublisher(
                        continueOnError: false,
                        failOnError: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: "k8s-master",
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: 'env.properties',
                                        remoteDirectory: "/home/master/",
                                        execCommand: '''
                                            # 새 버전 배포
                                            set -a
                                            . /home/master/env.properties
                                            set +a

                                            source env.properties

                                            DEPLOYMENTS=$(kubectl get deployments --no-headers | grep ^backend- | awk '{print $1}')

                                            IS_DEFAULT=false
                                            if [ -n "$DEPLOYMENTS" ]; then
                                                bash backend-deployment.sh ${CURRENT_VERSION} > backend-deployment.yml
                                                bash backend-svc.sh ${CURRENT_VERSION} > backend-svc.yml
                                                bash backend-ingress.sh ${CURRENT_VERSION} \\\"true\\\" \\"30\\" > backend-ingress.yml
                                                kubectl apply -f backend-ingress.yml
                                            else
                                                bash backend-deployment.sh ${CURRENT_VERSION} > backend-deployment.yml
                                                bash backend-svc.sh ${CURRENT_VERSION} > backend-svc.yml
                                                bash backend-ingress.sh ${CURRENT_VERSION} \\\"false\\\" > backend-ingress-default.yml
                                                kubectl apply -f backend-ingress-default.yml
                                                IS_DEFAULT=true
                                            fi

                                            kubectl apply -f backend-deployment.yml
                                            kubectl apply -f backend-svc.yml

                                            sleep 60

                                            check_health() {
                                                for i in {1..12}; do
                                                    HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "canary-version: new" http://192.0.30.101/test)
                                                    echo ${HTTP_STATUS}
                                                    if [ "$HTTP_STATUS" != "200" ]; then
                                                        echo "Error: Service did not return 200 status. Exiting..."
                                                        exit 1
                                                    fi
                                                    sleep 1
                                                done
                                            }

                                            check_health

                                            bash backend-ingress.sh ${CURRENT_VERSION} \\\"true\\\" \\"50\\" > backend-ingress.yml
                                            kubectl apply -f backend-ingress.yml
                                            sleep 5

                                            check_health

                                            if [ "$IS_DEFAULT" = false ]; then
                                                INGRESS_SVC=$(grep "name:" backend-ingress-default.yml | awk -F "name: " '{print $2}' | grep ^backend-svc)
                                                sed -i "s|${INGRESS_SVC}|backend-svc-v${CURRENT_VERSION}|g" backend-ingress-default.yml
                                                kubectl apply -f backend-ingress-default.yml
                                                sleep 20

                                                INGRESSES=$(kubectl get ingresses --no-headers | grep ^backend-ingress-v${CURRENT_VERSION} | awk '{print $1}')
                                                INGRESSES_ARRAY=($INGRESSES)
                                                for INGRESS in "${INGRESSES_ARRAY[@]}"; do
                                                    kubectl delete ingress $INGRESS
                                                done

                                                SERVICES=$(kubectl get services --no-headers | grep -v "^backend-svc-v${CURRENT_VERSION}" | grep ^backend | awk '{print $1}')
                                                SERVICES_ARRAY=($SERVICES)
                                                for SERVICE in "${SERVICES_ARRAY[@]}"; do
                                                    kubectl delete service $SERVICE
                                                done

                                                DEPLOYMENTS=$(kubectl get deployments --no-headers | grep -v ^backend-deployment-v${CURRENT_VERSION} | grep ^backend | awk '{print $1}')
                                                DEPLOYMENTS_ARRAY=($DEPLOYMENTS)
                                                for DEPLOYMENT in "${DEPLOYMENTS_ARRAY[@]}"; do
                                                    echo ${DEPLOYMENT} 삭제
                                                    kubectl delete deployment $DEPLOYMENT
                                                done
                                            fi

                                        '''
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }

    post {
        failure {
            sh 'echo 실패'
        }
        success {
            sh '''
            echo 성공
            '''
        }
    }
}
